
Ex8_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001540  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b56  00000000  00000000  00001841  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000768  00000000  00000000  00002397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006a8  00000000  00000000  00002ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000369f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.usart_init 0000001a  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.usart_transmit 0000000e  0000016e  0000016e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.usart_receive 0000000e  0000017c  0000017c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000036  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000194  00000194  00000208  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000196  00000196  0000020a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000158  00000158  000001cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
   8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
   c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  10:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  14:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  18:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  1c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  20:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  24:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  28:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  30:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  38:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  3c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  40:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  44:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  48:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  4c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  50:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  54:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  58:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  5c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  60:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  68:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  6c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  70:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  74:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  78:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  7c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  80:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  84:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  8c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  90:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  94:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  98:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  9c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a4:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  a8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  ac:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>
  b0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	e4 eb       	ldi	r30, 0xB4	; 180
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	17 c0       	rjmp	.+46     	; 0xf6 <__do_clear_bss+0x8>
  c8:	b5 91       	lpm	r27, Z+
  ca:	a5 91       	lpm	r26, Z+
  cc:	35 91       	lpm	r19, Z+
  ce:	25 91       	lpm	r18, Z+
  d0:	05 91       	lpm	r16, Z+
  d2:	07 fd       	sbrc	r16, 7
  d4:	0c c0       	rjmp	.+24     	; 0xee <__do_clear_bss>
  d6:	95 91       	lpm	r25, Z+
  d8:	85 91       	lpm	r24, Z+
  da:	ef 01       	movw	r28, r30
  dc:	f9 2f       	mov	r31, r25
  de:	e8 2f       	mov	r30, r24
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a2 17       	cp	r26, r18
  e6:	b3 07       	cpc	r27, r19
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x20>
  ea:	fe 01       	movw	r30, r28
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_clear_bss+0x8>

000000ee <__do_clear_bss>:
  ee:	1d 92       	st	X+, r1
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	e1 f7       	brne	.-8      	; 0xee <__do_clear_bss>
  f6:	e4 3b       	cpi	r30, 0xB4	; 180
  f8:	f4 07       	cpc	r31, r20
  fa:	31 f7       	brne	.-52     	; 0xc8 <__do_copy_data+0x8>
  fc:	0e 94 84 00 	call	0x108	; 0x108 <_etext>
 100:	0c 94 ac 00 	jmp	0x158	; 0x158 <exit>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>

Disassembly of section .text:

0000018a <__bad_interrupt>:
 18a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.usart_init:

0000013e <usart_init>:
Communication parameters: 8 Data ,1 Stop, no Parity
--------------------------------
parameters: ubrr to control the BAUD.
return value: None.*/
void usart_init(unsigned int ubrr){
  UCSR0A=0;
 13e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  UCSR0B=(1<<RXEN0)|(1<<TXEN0);
 142:	28 e1       	ldi	r18, 0x18	; 24
 144:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  UBRR0H=(unsigned char)(ubrr>>8);
 148:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L=(unsigned char)ubrr;
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  UCSR0C=(3 << UCSZ00);
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 156:	08 95       	ret

Disassembly of section .text.usart_transmit:

0000016e <usart_transmit>:
/* Routine: usart_transmit
Description: This routine sends a byte of data using usart.
parameters: data: the byte to be transmitted
return value: None. */
void usart_transmit(uint8_t data){
  while(!(UCSR0A&(1<<UDRE0)));
 16e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 172:	95 ff       	sbrs	r25, 5
 174:	fc cf       	rjmp	.-8      	; 0x16e <usart_transmit>
  UDR0=data;
 176:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17a:	08 95       	ret

Disassembly of section .text.usart_receive:

0000017c <usart_receive>:
/* Routine: usart_receive
Description: This routine receives a byte of data from usart.
parameters: None.
return value: the received byte */
uint8_t usart_receive(){
  while(!(UCSR0A&(1<<RXC0)));
 17c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 180:	88 23       	and	r24, r24
 182:	e4 f7       	brge	.-8      	; 0x17c <usart_receive>
  return UDR0;
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 188:	08 95       	ret

Disassembly of section .text.main:

00000108 <main>:
#include "../../libs/usart.h"
#include "../../libs/lcd_pex.h"

int main(void)
{
	usart_init(UBRR);
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 9f 00 	call	0x13e	; 0x13e <usart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	33 ed       	ldi	r19, 0xD3	; 211
 114:	80 e3       	ldi	r24, 0x30	; 48
 116:	21 50       	subi	r18, 0x01	; 1
 118:	30 40       	sbci	r19, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0xe>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x18>
 120:	00 00       	nop
	uint8_t num;
    while(1)
    {
        _delay_ms(1000);
		num = usart_receive();
 122:	0e 94 be 00 	call	0x17c	; 0x17c <usart_receive>
 126:	9f ef       	ldi	r25, 0xFF	; 255
 128:	23 ed       	ldi	r18, 0xD3	; 211
 12a:	30 e3       	ldi	r19, 0x30	; 48
 12c:	91 50       	subi	r25, 0x01	; 1
 12e:	20 40       	sbci	r18, 0x00	; 0
 130:	30 40       	sbci	r19, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x24>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x2e>
 136:	00 00       	nop
		_delay_ms(1000);
		usart_transmit(num);
 138:	0e 94 b7 00 	call	0x16e	; 0x16e <usart_transmit>
 13c:	e9 cf       	rjmp	.-46     	; 0x110 <main+0x8>

Disassembly of section .text.__dummy_fini:

00000192 <_fini>:
 192:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000194 <__funcs_on_exit>:
 194:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000196 <__simulator_exit>:
 196:	08 95       	ret

Disassembly of section .text.exit:

00000158 <exit>:
 158:	ec 01       	movw	r28, r24
 15a:	0e 94 ca 00 	call	0x194	; 0x194 <__funcs_on_exit>
 15e:	0e 94 c9 00 	call	0x192	; 0x192 <_fini>
 162:	ce 01       	movw	r24, r28
 164:	0e 94 cb 00 	call	0x196	; 0x196 <__simulator_exit>
 168:	ce 01       	movw	r24, r28
 16a:	0e 94 c7 00 	call	0x18e	; 0x18e <_Exit>

Disassembly of section .text._Exit:

0000018e <_Exit>:
 18e:	0e 94 82 00 	call	0x104	; 0x104 <_exit>
