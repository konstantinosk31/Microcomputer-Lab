
Ex4_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  00000449  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e0  00000000  00000000  000004cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3b  00000000  00000000  000015ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004bb  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033e  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000434  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000398  00000398  0000040c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.write_2_nibbles 0000003a  000002de  000002de  00000352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_data 00000018  00000336  00000336  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_command 00000018  0000034e  0000034e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_clear_display 00000014  0000037c  0000037c  000003f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_init 00000086  00000214  00000214  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_digit 00000008  00000390  00000390  00000404  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_number 0000009e  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    000000aa  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc.div 00000044  0000029a  0000029a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.libgcc.mul 0000001e  00000318  00000318  0000038c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_fini 00000002  000003a0  000003a0  00000414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_funcs_on_exit 00000002  000003a2  000003a2  00000416  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_simulator_exit 00000002  000003a4  000003a4  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.exit    00000016  00000366  00000366  000003da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text._Exit   00000004  0000039c  0000039c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
   8:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
   c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  10:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  14:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  18:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  1c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  20:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  24:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  28:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  2c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  30:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  34:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  38:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  3c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  40:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  44:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  48:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  4c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  50:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  54:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  58:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  5c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  60:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  64:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  68:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  6c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  70:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  74:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  78:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  7c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  80:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  84:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  88:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  8c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  90:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  94:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  98:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  9c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  a0:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  a4:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  a8:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  ac:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>
  b0:	0c 94 cc 01 	jmp	0x398	; 0x398 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 b3 01 	jmp	0x366	; 0x366 <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

00000398 <__bad_interrupt>:
 398:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.write_2_nibbles:

000002de <write_2_nibbles>:

#define NOP() do { __asm__ __volatile__ ( "nop "); } while (0)
#define V_REF 5

void write_2_nibbles(uint8_t data){
	uint8_t temp = PIND & 0x0f;
 2de:	29 b1       	in	r18, 0x09	; 9
 2e0:	2f 70       	andi	r18, 0x0F	; 15
	PORTD = data&(0xf0) | temp;
 2e2:	98 2f       	mov	r25, r24
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	92 2b       	or	r25, r18
 2e8:	9b b9       	out	0x0b, r25	; 11
	
	PORTD |= (1<<PD3);
 2ea:	9b b1       	in	r25, 0x0b	; 11
 2ec:	98 60       	ori	r25, 0x08	; 8
 2ee:	9b b9       	out	0x0b, r25	; 11
	NOP();
 2f0:	00 00       	nop
	NOP();
 2f2:	00 00       	nop
	PORTD &= ~(1<<PD3); 
 2f4:	9b b1       	in	r25, 0x0b	; 11
 2f6:	97 7f       	andi	r25, 0xF7	; 247
 2f8:	9b b9       	out	0x0b, r25	; 11
	
	PORTD = (data<<4)&(0xf0) | temp;
 2fa:	30 e1       	ldi	r19, 0x10	; 16
 2fc:	83 9f       	mul	r24, r19
 2fe:	c0 01       	movw	r24, r0
 300:	11 24       	eor	r1, r1
 302:	82 2b       	or	r24, r18
 304:	8b b9       	out	0x0b, r24	; 11
	
	PORTD |= (1<<PD3);
 306:	8b b1       	in	r24, 0x0b	; 11
 308:	88 60       	ori	r24, 0x08	; 8
 30a:	8b b9       	out	0x0b, r24	; 11
	NOP();
 30c:	00 00       	nop
	NOP();
 30e:	00 00       	nop
	PORTD &= ~(1<<PD3);
 310:	8b b1       	in	r24, 0x0b	; 11
 312:	87 7f       	andi	r24, 0xF7	; 247
 314:	8b b9       	out	0x0b, r24	; 11
 316:	08 95       	ret

Disassembly of section .text.lcd_data:

00000336 <lcd_data>:
}

void lcd_data(uint8_t data){
	PORTD |= (1<<PD2);
 336:	9b b1       	in	r25, 0x0b	; 11
 338:	94 60       	ori	r25, 0x04	; 4
 33a:	9b b9       	out	0x0b, r25	; 11
	write_2_nibbles(data);
 33c:	0e 94 6f 01 	call	0x2de	; 0x2de <write_2_nibbles>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	87 ee       	ldi	r24, 0xE7	; 231
 342:	93 e0       	ldi	r25, 0x03	; 3
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <lcd_data+0xe>
 348:	00 c0       	rjmp	.+0      	; 0x34a <lcd_data+0x14>
 34a:	00 00       	nop
 34c:	08 95       	ret

Disassembly of section .text.lcd_command:

0000034e <lcd_command>:
	_delay_us(250);
}

void lcd_command(uint8_t instruction){
	PORTD &= ~(1<<PD2);
 34e:	9b b1       	in	r25, 0x0b	; 11
 350:	9b 7f       	andi	r25, 0xFB	; 251
 352:	9b b9       	out	0x0b, r25	; 11
	write_2_nibbles(instruction);
 354:	0e 94 6f 01 	call	0x2de	; 0x2de <write_2_nibbles>
 358:	87 ee       	ldi	r24, 0xE7	; 231
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_command+0xe>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_command+0x14>
 362:	00 00       	nop
 364:	08 95       	ret

Disassembly of section .text.lcd_clear_display:

0000037c <lcd_clear_display>:
	_delay_us(250);
}

void lcd_clear_display(){
	lcd_command(0x01);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	9e e4       	ldi	r25, 0x4E	; 78
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <lcd_clear_display+0xa>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_clear_display+0x10>
 38c:	00 00       	nop
 38e:	08 95       	ret

Disassembly of section .text.lcd_init:

00000214 <lcd_init>:
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	83 ec       	ldi	r24, 0xC3	; 195
 218:	99 e0       	ldi	r25, 0x09	; 9
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <lcd_init+0x6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x10>
 224:	00 00       	nop
}

void lcd_init(){
	_delay_ms(200);
	
	PORTD = 0x30;
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PD3);
 22a:	9b b1       	in	r25, 0x0b	; 11
 22c:	98 60       	ori	r25, 0x08	; 8
 22e:	9b b9       	out	0x0b, r25	; 11
	NOP();
 230:	00 00       	nop
	NOP();
 232:	00 00       	nop
	PORTD &= ~(1<<PD3);
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	97 7f       	andi	r25, 0xF7	; 247
 238:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	e7 ee       	ldi	r30, 0xE7	; 231
 23c:	f3 e0       	ldi	r31, 0x03	; 3
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_init+0x2a>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_init+0x30>
 244:	00 00       	nop
	_delay_us(250);
	
	PORTD = 0x30;
 246:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PD3);
 248:	9b b1       	in	r25, 0x0b	; 11
 24a:	98 60       	ori	r25, 0x08	; 8
 24c:	9b b9       	out	0x0b, r25	; 11
	NOP();
 24e:	00 00       	nop
	NOP();
 250:	00 00       	nop
	PORTD &= ~(1<<PD3);
 252:	9b b1       	in	r25, 0x0b	; 11
 254:	97 7f       	andi	r25, 0xF7	; 247
 256:	9b b9       	out	0x0b, r25	; 11
 258:	e7 ee       	ldi	r30, 0xE7	; 231
 25a:	f3 e0       	ldi	r31, 0x03	; 3
 25c:	31 97       	sbiw	r30, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <lcd_init+0x48>
 260:	00 c0       	rjmp	.+0      	; 0x262 <lcd_init+0x4e>
 262:	00 00       	nop
	_delay_us(250);
	
	PORTD = 0x30;
 264:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PD3);
 266:	8b b1       	in	r24, 0x0b	; 11
 268:	88 60       	ori	r24, 0x08	; 8
 26a:	8b b9       	out	0x0b, r24	; 11
	NOP();
 26c:	00 00       	nop
	NOP();
 26e:	00 00       	nop
	PORTD &= ~(1<<PD3);
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	87 7f       	andi	r24, 0xF7	; 247
 274:	8b b9       	out	0x0b, r24	; 11
 276:	87 ee       	ldi	r24, 0xE7	; 231
 278:	93 e0       	ldi	r25, 0x03	; 3
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_init+0x66>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_init+0x6c>
 280:	00 00       	nop
	_delay_us(250);
	
	lcd_command(0x28);
 282:	88 e2       	ldi	r24, 0x28	; 40
 284:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_command>
	
	lcd_command(0x0c);
 288:	8c e0       	ldi	r24, 0x0C	; 12
 28a:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_command>
	
	lcd_clear_display();
 28e:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_clear_display>
	
	lcd_command(0x06);
 292:	86 e0       	ldi	r24, 0x06	; 6
 294:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_command>
 298:	08 95       	ret

Disassembly of section .text.lcd_digit:

00000390 <lcd_digit>:
}

void lcd_digit(uint8_t digit){
	lcd_data(0x30 + digit);
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_data>
 396:	08 95       	ret

Disassembly of section .text.lcd_number:

00000176 <lcd_number>:
}

void lcd_number(uint32_t number){
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	2a 97       	sbiw	r28, 0x0a	; 10
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
	uint8_t digits[10];
	int i = 0;
	if(number == 0){
 192:	61 15       	cp	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	81 05       	cpc	r24, r1
 198:	91 05       	cpc	r25, r1
 19a:	21 f4       	brne	.+8      	; 0x1a4 <lcd_number+0x2e>
		lcd_digit(0);
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_digit>
 1a2:	2b c0       	rjmp	.+86     	; 0x1fa <lcd_number+0x84>
 1a4:	e1 2c       	mov	r14, r1
 1a6:	f1 2c       	mov	r15, r1
		return;
	}
	do{
		digits[i++] = number%10;
 1a8:	87 01       	movw	r16, r14
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
 1ae:	2a e0       	ldi	r18, 0x0A	; 10
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodsi4>
 1ba:	e1 e0       	ldi	r30, 0x01	; 1
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	ee 0d       	add	r30, r14
 1c4:	ff 1d       	adc	r31, r15
 1c6:	60 83       	st	Z, r22
		number /= 10;
 1c8:	62 2f       	mov	r22, r18
 1ca:	73 2f       	mov	r23, r19
 1cc:	84 2f       	mov	r24, r20
 1ce:	95 2f       	mov	r25, r21
	if(number == 0){
		lcd_digit(0);
		return;
	}
	do{
		digits[i++] = number%10;
 1d0:	78 01       	movw	r14, r16
		number /= 10;
	} while(number > 0);
 1d2:	61 15       	cp	r22, r1
 1d4:	71 05       	cpc	r23, r1
 1d6:	81 05       	cpc	r24, r1
 1d8:	91 05       	cpc	r25, r1
 1da:	31 f7       	brne	.-52     	; 0x1a8 <lcd_number+0x32>
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <lcd_number+0x7e>
	for(; i > 0; ) lcd_digit(digits[--i]);
 1de:	01 50       	subi	r16, 0x01	; 1
 1e0:	11 09       	sbc	r17, r1
 1e2:	e1 e0       	ldi	r30, 0x01	; 1
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ec 0f       	add	r30, r28
 1e8:	fd 1f       	adc	r31, r29
 1ea:	e0 0f       	add	r30, r16
 1ec:	f1 1f       	adc	r31, r17
 1ee:	80 81       	ld	r24, Z
 1f0:	0e 94 c8 01 	call	0x390	; 0x390 <lcd_digit>
 1f4:	10 16       	cp	r1, r16
 1f6:	11 06       	cpc	r1, r17
 1f8:	94 f3       	brlt	.-28     	; 0x1de <lcd_number+0x68>
}
 1fa:	2a 96       	adiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

Disassembly of section .text.main:

000000cc <main>:

int main(void)
{
	DDRD = 0xff; //set PORTD as output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a b9       	out	0x0a, r24	; 10
	lcd_init();
  d0:	0e 94 0a 01 	call	0x214	; 0x214 <lcd_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	81 ee       	ldi	r24, 0xE1	; 225
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0xe>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x18>
  e4:	00 00       	nop
	_delay_ms(100);
	
	//   Vref = 5V, ADC1, Right adjust
	ADMUX = (1 << REFS0) | (0 << ADLAR) | (1 << MUX0);
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//   Enable, no interrupt, no conversion, 125 kHz
	ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADIE) | (7 << ADPS0);
  ec:	87 e8       	ldi	r24, 0x87	; 135
  ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	uint32_t val;
	
    while(1)
    {
        lcd_clear_display();
  f2:	0e 94 be 01 	call	0x37c	; 0x37c <lcd_clear_display>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	83 ed       	ldi	r24, 0xD3	; 211
  fa:	90 e3       	ldi	r25, 0x30	; 48
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x30>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x3a>
 106:	00 00       	nop
		_delay_ms(1000);
		ADCSRA |= 1 << ADSC;
 108:	ea e7       	ldi	r30, 0x7A	; 122
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
		while (ADCSRA & (1 << ADSC));
 112:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 116:	86 fd       	sbrc	r24, 6
 118:	fc cf       	rjmp	.-8      	; 0x112 <main+0x46>
		val = (((uint32_t)ADC)*V_REF*100)>>10;
 11a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 11e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 122:	a4 ef       	ldi	r26, 0xF4	; 244
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	0e 94 8c 01 	call	0x318	; 0x318 <__umulhisi3>
 12a:	05 2e       	mov	r0, r21
 12c:	5a e0       	ldi	r21, 0x0A	; 10
 12e:	96 95       	lsr	r25
 130:	87 95       	ror	r24
 132:	77 95       	ror	r23
 134:	67 95       	ror	r22
 136:	5a 95       	dec	r21
 138:	d1 f7       	brne	.-12     	; 0x12e <main+0x62>
 13a:	50 2d       	mov	r21, r0
		lcd_number(val/100);
 13c:	24 e6       	ldi	r18, 0x64	; 100
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	0e 94 4d 01 	call	0x29a	; 0x29a <__udivmodsi4>
 148:	6b 01       	movw	r12, r22
 14a:	7c 01       	movw	r14, r24
 14c:	ca 01       	movw	r24, r20
 14e:	b9 01       	movw	r22, r18
 150:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_number>
		lcd_data('.');
 154:	8e e2       	ldi	r24, 0x2E	; 46
 156:	0e 94 9b 01 	call	0x336	; 0x336 <lcd_data>
		lcd_number(val%100);
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_number>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <main+0x9c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <main+0xa6>
 172:	00 00       	nop
 174:	be cf       	rjmp	.-132    	; 0xf2 <main+0x26>

Disassembly of section .text.libgcc.div:

0000029a <__udivmodsi4>:
 29a:	a1 e2       	ldi	r26, 0x21	; 33
 29c:	1a 2e       	mov	r1, r26
 29e:	aa 1b       	sub	r26, r26
 2a0:	bb 1b       	sub	r27, r27
 2a2:	fd 01       	movw	r30, r26
 2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <__udivmodsi4_ep>

000002a6 <__udivmodsi4_loop>:
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	ee 1f       	adc	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	a2 17       	cp	r26, r18
 2b0:	b3 07       	cpc	r27, r19
 2b2:	e4 07       	cpc	r30, r20
 2b4:	f5 07       	cpc	r31, r21
 2b6:	20 f0       	brcs	.+8      	; 0x2c0 <__udivmodsi4_ep>
 2b8:	a2 1b       	sub	r26, r18
 2ba:	b3 0b       	sbc	r27, r19
 2bc:	e4 0b       	sbc	r30, r20
 2be:	f5 0b       	sbc	r31, r21

000002c0 <__udivmodsi4_ep>:
 2c0:	66 1f       	adc	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	88 1f       	adc	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	1a 94       	dec	r1
 2ca:	69 f7       	brne	.-38     	; 0x2a6 <__udivmodsi4_loop>
 2cc:	60 95       	com	r22
 2ce:	70 95       	com	r23
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	bd 01       	movw	r22, r26
 2da:	cf 01       	movw	r24, r30
 2dc:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000318 <__umulhisi3>:
 318:	a2 9f       	mul	r26, r18
 31a:	b0 01       	movw	r22, r0
 31c:	b3 9f       	mul	r27, r19
 31e:	c0 01       	movw	r24, r0
 320:	a3 9f       	mul	r26, r19
 322:	70 0d       	add	r23, r0
 324:	81 1d       	adc	r24, r1
 326:	11 24       	eor	r1, r1
 328:	91 1d       	adc	r25, r1
 32a:	b2 9f       	mul	r27, r18
 32c:	70 0d       	add	r23, r0
 32e:	81 1d       	adc	r24, r1
 330:	11 24       	eor	r1, r1
 332:	91 1d       	adc	r25, r1
 334:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000003a0 <_fini>:
 3a0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003a2 <__funcs_on_exit>:
 3a2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003a4 <__simulator_exit>:
 3a4:	08 95       	ret

Disassembly of section .text.exit:

00000366 <exit>:
 366:	ec 01       	movw	r28, r24
 368:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__funcs_on_exit>
 36c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fini>
 370:	ce 01       	movw	r24, r28
 372:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__simulator_exit>
 376:	ce 01       	movw	r24, r28
 378:	0e 94 ce 01 	call	0x39c	; 0x39c <_Exit>

Disassembly of section .text._Exit:

0000039c <_Exit>:
 39c:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>
