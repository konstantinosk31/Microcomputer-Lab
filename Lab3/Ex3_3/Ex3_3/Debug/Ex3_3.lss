
Ex3_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000030d  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000030d  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1c  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a4  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036a  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000318  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000089  00000000  00000000  000020fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000023e  0000023e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_5 00000096  00000114  00000114  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000007e  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.DUTY    0000000d  00800106  0000024c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.__dummy_fini 00000002  00000246  00000246  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000248  00000248  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000024a  0000024a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000228  00000228  000002dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000242  00000242  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <_etext>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000000b4 <.dinit>:
  b4:	01 00       	.word	0x0001	; ????
  b6:	01 06       	cpc	r0, r17
  b8:	80 01       	movw	r16, r0
  ba:	06 01       	movw	r0, r12
  bc:	13 00       	.word	0x0013	; ????
  be:	02 4c       	sbci	r16, 0xC2	; 194

000000c0 <__ctors_end>:
  c0:	11 24       	eor	r1, r1
  c2:	1f be       	out	0x3f, r1	; 63
  c4:	cf ef       	ldi	r28, 0xFF	; 255
  c6:	d8 e0       	ldi	r29, 0x08	; 8
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
  cc:	e4 eb       	ldi	r30, 0xB4	; 180
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	17 c0       	rjmp	.+46     	; 0x102 <__do_clear_bss+0x8>
  d4:	b5 91       	lpm	r27, Z+
  d6:	a5 91       	lpm	r26, Z+
  d8:	35 91       	lpm	r19, Z+
  da:	25 91       	lpm	r18, Z+
  dc:	05 91       	lpm	r16, Z+
  de:	07 fd       	sbrc	r16, 7
  e0:	0c c0       	rjmp	.+24     	; 0xfa <__do_clear_bss>
  e2:	95 91       	lpm	r25, Z+
  e4:	85 91       	lpm	r24, Z+
  e6:	ef 01       	movw	r28, r30
  e8:	f9 2f       	mov	r31, r25
  ea:	e8 2f       	mov	r30, r24
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a2 17       	cp	r26, r18
  f2:	b3 07       	cpc	r27, r19
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x20>
  f6:	fe 01       	movw	r30, r28
  f8:	04 c0       	rjmp	.+8      	; 0x102 <__do_clear_bss+0x8>

000000fa <__do_clear_bss>:
  fa:	1d 92       	st	X+, r1
  fc:	a2 17       	cp	r26, r18
  fe:	b3 07       	cpc	r27, r19
 100:	e1 f7       	brne	.-8      	; 0xfa <__do_clear_bss>
 102:	e0 3c       	cpi	r30, 0xC0	; 192
 104:	f4 07       	cpc	r31, r20
 106:	31 f7       	brne	.-52     	; 0xd4 <__do_copy_data+0x8>
 108:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
 10c:	0c 94 14 01 	jmp	0x228	; 0x228 <exit>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>

Disassembly of section .text:

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_5:

00000114 <__vector_5>:
uint8_t *DC_VALUE;
uint8_t prev_PIND;
uint8_t DUTY[] = {5, 26, 46, 66, 87, 107, 128, 148, 168, 189, 209, 230, 250};
uint8_t POT_VALUE;

ISR(PCINT2_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	uint8_t cur_PIND = ~PIND;
 122:	99 b1       	in	r25, 0x09	; 9
 124:	90 95       	com	r25
	uint8_t temp = (~prev_PIND) & cur_PIND; //get the pin that was just set
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	80 95       	com	r24
 12c:	89 23       	and	r24, r25
	prev_PIND = cur_PIND;
 12e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if(temp & (1<<6)){ //PD6 pressed -> select mode1
 132:	86 ff       	sbrs	r24, 6
 134:	03 c0       	rjmp	.+6      	; 0x13c <__vector_5+0x28>
		mode = MODE1;
 136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mode>
 13a:	05 c0       	rjmp	.+10     	; 0x146 <__vector_5+0x32>
	} else if(temp & (1<<7)){ //PD7 pressed -> select mode2
 13c:	88 23       	and	r24, r24
 13e:	1c f4       	brge	.+6      	; 0x146 <__vector_5+0x32>
		mode = MODE2;
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <mode>
	}
	
	if (mode == MODE1) {
 146:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <mode>
 14a:	91 11       	cpse	r25, r1
 14c:	1f c0       	rjmp	.+62     	; 0x18c <__vector_5+0x78>
		if((temp & (1<<1)) && i < DUTY_LAST) //PD1 pressed
 14e:	81 ff       	sbrs	r24, 1
 150:	08 c0       	rjmp	.+16     	; 0x162 <__vector_5+0x4e>
 152:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <i>
 156:	9c 30       	cpi	r25, 0x0C	; 12
 158:	24 f4       	brge	.+8      	; 0x162 <__vector_5+0x4e>
			i++;
 15a:	9f 5f       	subi	r25, 0xFF	; 255
 15c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <i>
 160:	09 c0       	rjmp	.+18     	; 0x174 <__vector_5+0x60>
		else if((temp & (1<<2)) && i > 0) //PD2 pressed
 162:	82 ff       	sbrs	r24, 2
 164:	07 c0       	rjmp	.+14     	; 0x174 <__vector_5+0x60>
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 16a:	18 16       	cp	r1, r24
 16c:	1c f4       	brge	.+6      	; 0x174 <__vector_5+0x60>
			i--;
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
		DC_VALUE = DUTY + i;
 174:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 178:	08 2e       	mov	r0, r24
 17a:	00 0c       	add	r0, r0
 17c:	99 0b       	sbc	r25, r25
 17e:	8a 5f       	subi	r24, 0xFA	; 250
 180:	9e 4f       	sbci	r25, 0xFE	; 254
 182:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DC_VALUE+0x1>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DC_VALUE>
 18a:	08 c0       	rjmp	.+16     	; 0x19c <__vector_5+0x88>
	} else if (mode == MODE2) {
 18c:	91 30       	cpi	r25, 0x01	; 1
 18e:	31 f4       	brne	.+12     	; 0x19c <__vector_5+0x88>
		DC_VALUE = &POT_VALUE;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DC_VALUE+0x1>
 198:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DC_VALUE>
	}
}
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

Disassembly of section .text.main:

000001aa <main>:

int main(void)
{
	// Set PORTB as output
	DDRB = 0xff;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	84 b9       	out	0x04, r24	; 4
	
	// Set PORTD as input
	DDRD = 0x00;
 1ae:	1a b8       	out	0x0a, r1	; 10
	
	// Fast PWM, 8 bit, non-inverting output, N = 256. BOTTOM = 0, TOP = 0x00ff = 255
	TCCR1A = (1<<WGM10) | (1<<COM1A1);
 1b0:	81 e8       	ldi	r24, 0x81	; 129
 1b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12) | (1<<CS12);
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	// Enable PCINT17 (PD1), PCINT18 (PD2) interrupts
	PCMSK2 = (1<<PCINT17) | (1<<PCINT18) | (1 << PCINT22) | (1 << PCINT23);
 1bc:	86 ec       	ldi	r24, 0xC6	; 198
 1be:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	// Enable Pin Change Interrupt 2: PCINT[23:16]
	PCICR = (1<<PCIE2);
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	
	prev_PIND = 0;
 1c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	i = DUTY_START;
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
	DC_VALUE = DUTY + i;
 1d2:	8c e0       	ldi	r24, 0x0C	; 12
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <DC_VALUE+0x1>
 1da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <DC_VALUE>
	mode = MODE1;
 1de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mode>
	
	//   Vref = 5V, ADC0, Left adjust
	ADMUX = (1 << REFS0) | (1 << ADLAR) | (0 << MUX0);
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	//   Enable, no interrupt, no conversion, 125 kHz
	ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADIE) | (7 << ADPS0);
 1e8:	87 e8       	ldi	r24, 0x87	; 135
 1ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	
	sei();
 1ee:	78 94       	sei
	while(1)
	{
		ADCSRA |= 1 << ADSC;
 1f0:	ea e7       	ldi	r30, 0x7A	; 122
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	80 83       	st	Z, r24
		while (ADCSRA & (1 << ADSC));
 1fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1fe:	86 fd       	sbrc	r24, 6
 200:	fc cf       	rjmp	.-8      	; 0x1fa <main+0x50>
		POT_VALUE = 255 - ADCH;
 202:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 206:	80 95       	com	r24
 208:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <POT_VALUE>
		
		OCR1AL = *DC_VALUE;
 20c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <DC_VALUE>
 210:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <DC_VALUE+0x1>
 214:	80 81       	ld	r24, Z
 216:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e3       	ldi	r24, 0x3F	; 63
 21c:	9c e9       	ldi	r25, 0x9C	; 156
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x74>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x7a>
 224:	00 00       	nop
 226:	e4 cf       	rjmp	.-56     	; 0x1f0 <main+0x46>

Disassembly of section .text.__dummy_fini:

00000246 <_fini>:
 246:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000248 <__funcs_on_exit>:
 248:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000024a <__simulator_exit>:
 24a:	08 95       	ret

Disassembly of section .text.exit:

00000228 <exit>:
 228:	ec 01       	movw	r28, r24
 22a:	0e 94 24 01 	call	0x248	; 0x248 <__funcs_on_exit>
 22e:	0e 94 23 01 	call	0x246	; 0x246 <_fini>
 232:	ce 01       	movw	r24, r28
 234:	0e 94 25 01 	call	0x24a	; 0x24a <__simulator_exit>
 238:	ce 01       	movw	r24, r28
 23a:	0e 94 21 01 	call	0x242	; 0x242 <_Exit>

Disassembly of section .text._Exit:

00000242 <_Exit>:
 242:	0e 94 88 00 	call	0x110	; 0x110 <_exit>
